""k-최근접 이웃의 한계""
import numpy as np
perch_length = np.array(
[ 8.4, 13.7, 15.0, 16.2,21.0, 21.0, 21.0,22.5, 22.7,
27.3, 27.5,36.5, 36.0, 37.0,40.0, 42.0, 43.0, 43.0,21.3,23.0, 23.5,27.5, 27.5,37.0,
17.4, 18.0,22.0, 22.0,24.0, 24.0,28.0, 28.7,39.0, 39.0,43.5, 44.018.7, 19.0,22.0, 22.0,
24.6, 25.0,30.0, 32.8,39.0, 40.0,19.6, 20.0,
22.0, 22.5,25.6, 26.5,34.5, 35.0,40.0, 40.0]
)

perch_weight = np.array(
[ 5.9,110.0,130.0,130.0,197.0,
514.0,820.0,32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0,
115.0,150.0,150.0,218.0,556.0,850.0,
125.0,145.0,145.0,300.0,900.0,120.0,170.0,
170.0,265.0,700.0,120.0,225.0,225.0,
250.0,700.0,130.0,145.0,145.0,250.0,690.0,135.0,
188.0,188.0,300.0,900.0,85.0,110.0,
180.0,180.0,320.0,650.0,130.0,150.0,150.0,260.0,685.0,
1015.0, 820.0, 1100.0, 1000.0, 1100.0,1000.0, 1000.0]
)
from sklearn.model_selection import train_test_split

# 훈련 세트와 테스트 세트로 나눕니다
trainjnput, test_input, train_target, test_target = train_test_split(
perch_length,perch_weight, random_state=42)

# 훈련 세트와 테스트 세트를 2차원 배열로 바꿉니다
train_input = train_input.reshape(-l, 1)
test_input = test_input.reshape(-l, 1)
from sklearn.neighbors import KNeighborsRegressor
knr = KNeighborsRegressor(n_neighbors=3)


# k-최근접 이웃 회귀 모델을 훈련합니다
knr.fit(train_input, train_target)
print(knr.predict([[50]]))
import matplotlib.pyplot as pit


# 50cm 농어의 이웃을 구합니다
distances, indexes = knr.kneighbors([[50]])


# 훈련 세트의 산점도를 그립니다
pit.scatter(train_input, train_target)

# 훈련 세트 중에서 이웃 샘플만 다시 그립니다
pit.scatter(train_input[indexes], train_target[indexes], marker='D')

# 50cm 농어 데이터
plt.scatter(50, 1033, marker=,/K,)
plt.xlabel(’length')
pit.ylabel('weight')
plt.show()

print(np.mean(train_target[indexes]))
print(knr.predict([[100]]))


# 100cm 농어의 이웃을 구합니다
distances, indexes = knr.kneighbors([[100]])

# 훈련 세트의 산점도를 그립니다
pit.scatter(train_input, train_target)

# 훈련 세트 중에서 이웃 샘플만 다시 그립니다
pit.scatter(train_input[indexes], train_target[indexes], marker='D*)

# 100cm 농어 데이터
plt.scatter(100, 1033, marker#1스,)
plt.xlabelC length')
plt.ylabel('weight')
plt.show()


"" 선형 회귀""
from sklearn.linear_model import LinearRegression
lr = LinearRegression()


# 선형 회귀 모델을 훈련합니다
lr.fit(train_input, train_target)


# 50cm 농어에 대해 예측합니다
print(lr.predict([[50]]))
print(lr.coef_> lr.intercept,)

# 훈련 세트의 산점도를 그립니다
plt.scatter(train_input, train_target)

# 15에서 50까지 1차 방정식 그래프를 그립니다
plt.plot([15, 50], [15 *lr.coef_+lr.intercept_, 50*lr.coef_+lr.intercept,])

# 50cm 농어 데이터
plt.scatter(50, 1241.8, marker=,yv，)
plt.xlabelC length')
pit•ylabel('weight')
plt.show()

print(lr.score(train_input, train_target)) # 훈련 세트
priiit(lr.score(test_inpiit, test_target)) # 테스트 세트



""다항 회귀""
train_poly = np.column_stack((train_input ** 2, train_input))
test_poly = np.column_stack((test_input ** 2, test_input))
print(train_poly.shape, test_poly.shape)
lr = LinearRegression()
lr.fit(train_poly_> train_target)
print(lr.predict([[50 **2, 50]]))
print(lr.coef_, lr.intercept_)

# 구간별 직선을 그리기 위해 15에서 49까지 정수 배열을 만듭니다
point = np.arange(15, 50)

# 훈련 세트의 산점도를 그립니다
plt.scatter(train_input, train_target)

# 15에서 49까지 2차 방정식 그래프를 그립니다
plt.plot(point, 1.01 point 2** - 21.6 point * + 116.05)

# 50cm 농어 데이터
plt.scatter([50], [1574], marker=,A,)
plt.xlabelC length')
plt.ylabel('weight')
plt.show()
print(lr.score(train_poly, train_target))
print(lr.score(test_poly, test_target))

